#!/bin/bash

# Basic imports

option=$1
parameter=$2
parameter2=$3

disable_done=False

random_sleep_progress_bar=$(echo -e $(( $RANDOM % 8 + 1 )))

bold=$(tput bold)
normal=$(tput sgr0)

Color_Off='\033[0m'       # Text Reset

# Check if config file exist

function CheckConfigFile {
      ConfigFileCheck=$HOME/cromha-manager-config.yaml
      if test -f "$ConfigFileCheck"; then
            sleep .1
      else
            echo -e "${bold}ERROR:Couldn't locate config file at $HOME/cromha-manager-config.yaml. Please get a config file by running 'cromha-manager-ctl upgrade' or by running the install.sh script provided in the github repo"
      fi
}

# Functions

# Progress bar

function ProgressBar () {
      for i in {1..100}; do
	output="\r"

	output="$output ["
	total=$i
	count=0

	while [ $count -lt $total ]; do
		output="$output${progress_bar_full}"
		let count=$count+3
	done

	let total=100-$total
	count=0

	while [ $count -lt $total ]; do
		output="${output}${progress_bar_none}" 
		let count=$count+3
	done
	output="$output ] $i/100%"
	echo -ne "$output"

      random_sleep_progress_bar=0.1
	sleep $random_sleep_progress_bar
done
echo -e " ${B2}$progress_bar_done${Color_Off}"
}

function ProgressBarSlow () {
      for i in {1..100}; do
	output="\r"

	output="$output ["
	total=$i
	count=0

	while [ $count -lt $total ]; do
		output="$output${progress_bar_full}"
		let count=$count+3
	done

	let total=100-$total
	count=0

	while [ $count -lt $total ]; do
		output="${output}${progress_bar_none}" 
		let count=$count+3
	done
	output="$output ] $i/100%"
	echo -ne "$output"

      random_sleep_progress_bar=$(echo -e "$(( ($RANDOM / 2500 + 1)))")
	sleep $random_sleep_progress_bar
done
echo -e " ${B2}$progress_bar_done${Color_Off}"
}

function ProgressBarFast () {
      for i in {1..100}; do
	output="\r"

	output="$output ["
	total=$i
	count=0

	while [ $count -lt $total ]; do
		output="$output${progress_bar_full}"
		let count=$count+3
	done

	let total=100-$total
	count=0

	while [ $count -lt $total ]; do
		output="${output}${progress_bar_none}" 
		let count=$count+3
	done
	output="$output ] $i/100%"
	echo -ne "$output"

      random_sleep_progress_bar=.01
	sleep $random_sleep_progress_bar
done
echo -e " ${B2}$progress_bar_done${Color_Off}"
}

function Timer () {
      current_wait_time="$wait_time"

      echo " "
      echo -e "${B1}Timer:${Color_Off}"

      while [ "$current_wait_time" -gt -1 ]; do
            echo -ne "${B6}$current_wait_time\033[0K\r${Color_Off}"
            let current_wait_time=$current_wait_time-1
            sleep 1
      done

      sleep 1
      echo 0
}

function CheckNetwork () {
      echo -e "${C5}Checking network connection...${Color_Off}"
      wget --spider --quiet http://google.com
      if [ "$?" != 0 ]; then
            sleep 3
            echo ""
            echo -e "${B1}ERROR: Your computer is not connected to any network, please make sure it is connected to the internet${Color_Off} $progress_bar_error"
            sleep 3
            echo ""
            echo -e "${C5}Aborting current process...${Color_Off}"
            sleep 1
            exit
      fi
}

# YAML parser
function parse_yaml {
      local prefix=$2
      local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo -e @|tr @ '\034')
      sed -ne "s|^\($s\):|\1|" \
            -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
            -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
      awk -F$fs '{
            indent = length($1)/2;
            vname[indent] = $2;
            for (i in vname) {if (i > indent) {delete vname[i]}}
            if (length($3) > 0) {
                  vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
                  printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
            }
      }'
}
eval "$(parse_yaml $HOME/cromha-manager-config.yaml "CONFIG_")"

# Package managers information (enabled or disabled)

flatpak=$(echo -e "$CONFIG_package_managers_flatpak")
snap=$(echo -e "$CONFIG_package_managers_snapcraft")
yum=$(echo -e "$CONFIG_package_managers_yum")
cargo=$(echo -e "$CONFIG_package_managers_cargo")
dnf=$(echo -e "$CONFIG_package_managers_dnf")
apt=$(echo -e "$CONFIG_package_managers_apt")
zypp=$(echo -e "$CONFIG_package_managers_zypp")

# Color palette variables

C0=$(echo -e "$CONFIG_color_palette_color_0")
C1=$(echo -e "$CONFIG_color_palette_color_1")
C2=$(echo -e "$CONFIG_color_palette_color_2")
C3=$(echo -e "$CONFIG_color_palette_color_3")
C4=$(echo -e "$CONFIG_color_palette_color_4")
C5=$(echo -e "$CONFIG_color_palette_color_5")
C6=$(echo -e "$CONFIG_color_palette_color_6")
C7=$(echo -e "$CONFIG_color_palette_color_7")

B0=$(echo -e "$CONFIG_color_palette_color_B0")
B1=$(echo -e "$CONFIG_color_palette_color_B1")
B2=$(echo -e "$CONFIG_color_palette_color_B2")
B3=$(echo -e "$CONFIG_color_palette_color_B3")
B4=$(echo -e "$CONFIG_color_palette_color_B4")
B5=$(echo -e "$CONFIG_color_palette_color_B5")
B6=$(echo -e "$CONFIG_color_palette_color_B6")
B7=$(echo -e "$CONFIG_color_palette_color_B7")

# Informations variables

version_ver=$(echo -e "$CONFIG_informations_version")
default_config="settings:
  wait_time: 15
  progress_bar_done_sprite: ✔
  progress_bar_error_sprite: ✘
  progress_bar_empty_sprite: ▱
  progress_bar_full_sprite: ▰
  prefered_txt_editor: nano
  prefered_flatpak_repo: flathub
  notifications: True
package_managers:
  apt: False
  cargo: False
  dnf: False
  flatpak: False
  snapcraft: False
  yum: False
  zypp: False
informations:
  version: 0.1
  distro: none
color_palette:
  color_0: \033[0;30m
  color_1: \033[0;31m
  color_2: \033[0;32m
  color_3: \033[0;33m
  color_4: \033[0;34m
  color_5: \033[0;35m
  color_6: \033[0;36m
  color_7: \033[0;37m
  color_B0: \033[1;30m
  color_B1: \033[1;31m
  color_B2: \033[1;32m
  color_B3: \033[1;33m
  color_B4: \033[1;34m
  color_B5: \033[1;35m
  color_B6: \033[1;36m
  color_B7: \033[1;37m"

# Settings

wait_time=$(echo -e "$CONFIG_settings_wait_time")

progress_bar_done=$(echo -e "${B2}$CONFIG_settings_progress_bar_done_sprite${Color_Off}")
progress_bar_error=$(echo -e "${B1}$CONFIG_settings_progress_bar_error_sprite${Color_Off}")
progress_bar_none=$(echo -e "${C6}$CONFIG_settings_progress_bar_empty_sprite${Color_Off}")
progress_bar_full=$(echo -e "${B6}$CONFIG_settings_progress_bar_full_sprite${Color_Off}")

prefered_text_editor=$(echo -e "$CONFIG_settings_prefered_text_editor")
prefered_flatpak_repo=$(echo -e "$CONFIG_settings_prefered_flatpak_repo")

user_distro=$(echo -e "$CONFIG_informations_distro")

notifications=$(echo -e "$CONFIG_settings_notifications")

# Start jobs

if [ "$option" == "" ]; then
      echo -e  "${B1}_________                       .__            
\_   ___ \_______  ____   _____ |  |__ _____   
/    \  \/\_  __ \/  _ \ /     \|  |  \\__  \  
\     \____|  | \(  <_> )  Y Y  \   Y  \/ __ \_
 \______  /|__|   \____/|__|_|  /___|  (____  /
        \/                    \/     \/     \/ 
${Color_Off}"
      echo -e " "
      echo -e "${B6}===============================================================================${normal}"
      echo -e  "${B5}Github Repository${Color_Off}: ${B4}https://github.com/OcelotWalrus/Bash-Multi-Package-Manager${Color_Off}"
      echo -e " "
      echo -e  "${C2}Current version${Color_Off}: ${B3}$version_ver${Color_Off}"
      echo -e "${B6}===============================================================================${normal}"
      echo -e " "
      echo -e  "${C6}A bash script to manage multiple package
managers easily with high customizability.${Color_Off}"
      echo -e " "
      echo -e "Hint: run '$ cromha-manager help' for help"
      disable_done=True
fi

if [ $disable_done == False ]; then
      echo -e "${B6}Note that this operation can take multiple minutes${normal}"
      echo -e " "
fi

# Options

if [ "$option" == "autoremove" ]; then
      echo -e "${C5}Looking for uneeded or unused dependencises...${Color_Off}"
      echo -e "${C5}Autoremoving packages...${Color_Off}"
      echo " "
      if [ "$flatpak" == True ]; then
            echo -e "[Autoremoving Flatpak Packages]"
            sudo flatpak uninstall -y --unused >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$snap" == True ]; then
            echo -e ${B1}ERROR: Sorry but snapcraft autoremove is not yet supported${normal} $progress_bar_error
      fi
      if [ "$yum" == True ]; then
            echo -e "[Autoremoving Yum Packages]"
            sudo yum autoremove -y >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$cargo" == True ]; then
            echo -e ${B1}ERROR: Sorry but cargo autoremove is not yet supported${normal} $progress_bar_error
      fi
      if [ "$dnf" == True ]; then
            echo -e "[Autoremoving DNF Packages]"
            sudo dnf autoremove -y >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$apt" == True ]; then
            echo -e "[Autoremoving APT Packages]"
            sudo apt autoremove -y >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$zypp" == True ]; then
            echo -e ${B1}ERROR: Sorry but zypper autoremove is not yet supported${normal} $progress_bar_error
      fi
fi

if [ "$option" == "upgrade" ] || [ "$option" == "update" ]; then
      CheckNetwork
      sleep 3
      echo -e "${C5}Checking for package managers updates...${Color_Off}"
      sleep 3
      echo -e "${C5}Updating different package managers...${Color_Off}"
      sleep 3
      echo -e " "
      if [ $flatpak == True ]; then
            echo -e "[Upgrading Flatpak Packages]"
            sudo flatpak update -y >&- 2>&- & PIDFLATPAK1=$!
            ProgressBar & PIDFLATPAK2=$!
            wait $PIDFLATPAK1
            wait $PIDFLATPAK2
      fi
      if [ $snap == True ]; then
            echo -e "[Upgrading Snapcraft Packages]"
            sudo snap refresh >&- 2>&- & PIDSNAP1=$!
            ProgressBar & PIDSNAP2=$!
            wait $PIDSNAP1
            wait $PIDSNAP2
      fi
      if [ $yum == True ]; then
            echo -e "[Upgrading Yum Packages]"
            sudo yum update -y >&- 2>&- & PIDYUM1=$!
            ProgressBar & PIDYUM2=$!
            wait $PIDYUM1
            wait $PIDYUM2
      fi
      if [ $cargo == True ]; then
            echo -e "[Upgrading Cargo Packages]"
            sudo cargo update -y >&- 2>&- & PIDCARGO1=$!
            ProgressBar & PIDCARGO2=$!
            wait $PIDCARGO1
            wait $PIDCARGO2
      fi
      if [ $dnf == True ]; then
            echo -e "[Upgrading Dnf Packages]"
            sudo dnf update -y >&- 2>&- & PIDDNF1=$!
            ProgressBar & PIDDNF2=$!
            wait $PIDDNF1
            wait $PIDDNF2
      fi
      if [ $apt == True ]; then
            echo -e "[Upgrading APT Packages]"
            sudo apt update -y >&- 2>&- & PIDAPT1=$!
            ProgressBar & PIDAPT2=$!
            wait $PIDAPT1
            wait $PIDAPT2
      fi
      if [ $zypp == True ]; then
            echo -e "[Upgrading Zypp Packages]"
            sudo zypper update -y >&- 2>&- & PIDZYPP1=$!
            ProgressBar & PIDZYPP2=$!
            wait $PIDZYPP1
            wait $PIDZYPP2
      fi
      if [ "$notifications" == True ]; then
            notify-send "Finished upgrading your system"
      fi
fi

if [ "$option" == "upgrade-all" ] || [ "$option" == "update-all" ]; then
      CheckNetwork
      sleep 3
      echo -e "${C5}Checking for package managers updates...${Color_Off}"
      sleep 3
      echo -e "${C5}Trying to update all package managers...${Color_Off}"
      echo -e " "
      echo -e "[Upgrading Flatpak Packages]"
      sudo flatpak update -y >&- 2>&- & PIDFLATPAK1=$!
      ProgressBar & PIDFLATPAK2=$!
      wait $PIDFLATPAK1
      wait $PIDFLATPAK2
      echo -e "[Upgrading Snapcraft Packages]"
      sudo snap refresh >&- 2>&- & PIDSNAP1=$!
      ProgressBar & PIDSNAP2=$!
      wait $PIDSNAP1
      wait $PIDSNAP2
      echo -e "[Upgrading Yum Packages]"
      sudo yum update -y >&- 2>&- & PIDYUM1=$!
      ProgressBar & PIDYUM2=$!
      wait $PIDYUM1
      wait $PIDYUM2
      echo -e "[Upgrading Cargo Packages]"
      sudo cargo update -y >&- 2>&- & PIDCARGO1=$!
      ProgressBar & PIDCARGO2=$!
      wait $PIDCARGO1
      wait $PIDCARGO2
      echo -e "[Upgrading Dnf Packages]"
      sudo dnf update -y >&- 2>&- & PIDDNF1=$!
      ProgressBar & PIDDNF2=$!
      wait $PIDDNF1
      wait $PIDDNF2
      echo -e "[Upgrading APT Packages]"
      sudo apt update -y >&- 2>&- & PIDAPT1=$!
      ProgressBar & PIDAPT2=$!
      wait $PIDAPT1
      wait $PIDAPT2
      echo -e "[Upgrading Zypp Packages]"
      sudo zypper update -y >&- 2>&- & PIDZYPP1=$!
      ProgressBar & PIDZYPP2=$!
      wait $PIDZYPP1
      wait $PIDZYPP2
      if [ "$notifications" == True ]; then
            notify-send "Finished upgrading your system"
      fi
fi

if [ "$option" == "sys-upgrade" ] || [ "$option" == "system-upgrade" ]; then
      echo -e "${C6}It is highly recommended to make a backup of your system before upgrading to a new distribution release"
      echo -e ""
      CheckNetwork
      sleep 3
      echo -e "${C5}Checking current Linux distribution...${Color_Off}"
      echo " "
      if [ "$user_distro" == "none" ]; then
            echo -e "${B1}ERROR: Sorry but it seems that you didn't specified any distro in your config file located in $HOME/cromha-manager-config.yaml. Please use cromha-manager config to specify it they try again $progress_bar_error"
            echo " "
            echo -e "${C5}Aborting current process..."
            sleep .5
            exit 1
      fi
      echo -e "${C3}Is it right that you are on the distro '$user_distro'? (y/n)${Color_Off}"
      read answer
      echo -e " "
      if [ "$user_distro" == "fedora" ] && [ "$answer" == "y" ]; then
            current_fedora_ver=$(awk -F= '$1=="VERSION_ID" { print $2 ;}' /etc/os-release)
            new_fedora_ver=$(echo -e $(( "$current_fedora_ver" + 1 )))
            echo -e "${B6}Please make sure that before running this command you have upgraded then rebooted your computer (by running 'cromha-manager upgrade -reboot' ${Color_Off}"
            echo -e "${B6}System upgrade will begin in $wait_time seconds${Color_Off}"
            if [ "$notifications" == True ]; then
                  notify-send "System upgrade will begin in $wait_time seconds"
            fi
            Timer
            echo " "
            CheckNetwork
            sleep 3
            echo -e "${C5}Installing dnf system-upgrade plugin if not installed...${Color_Off}"
            echo " "
            sudo dnf install dnf-plugin-system-upgrade -y >&- 2>&- & PID1=$!
            echo "[Installing system-upgrade dnf plugin]"
            ProgressBarFast & PID2=$!
            wait $PID1
            wait $PID2
            echo -e "${C5}Downloading Fedora $new_fedora_ver packages...${Color_Off}"
            echo " "
            echo -e "[Downloading Fedora $new_fedora_ver packages]"
            sudo dnf system-upgrade download --allowerasing --releasever="$new_fedora_ver" -y >&- 2>&- & PID1=$!
            ProgressBarSlow & PID2=$!
            wait $PID1
            wait $PID2
            echo " "
            echo -e "${C5} Rebooting in $wait_time seconds to apply upgrades...${Color_Off}"
            if [ "$notifications" == True ]; then
                  notify-send "Rebooting in $wait_time seconds to apply upgrades"
            fi
            Timer
            sudo dnf system-upgrade reboot -y >&- 2>&-
      fi
      if [ "$user_distro" == "ubuntu" ] && [ "$answer" == "y" ]; then
            echo -e "${B6}Please make sure that before upgrading your system you runned the following commands and make sure you enabled apt package manager in your $HOME/cromha-manager-config.yaml file; if not run it: cromha-manager upgrade -reboot${Color_Off}"
            echo " "
            echo -e "${B6}System upgrade wil begin in $wait_time seconds${Color_Off}"
            if [ "$notifications" == True ]; then
                  notify-send "System upgrade will begin in $wait_time seconds"
            fi
            Timer
            echo " "
            CheckNetwork
            sleep 3
            echo -e "${C5}Downloading Unbuntu/APT-Based distro newer version packages...${Color_Off}"
            echo " "
            echo -e "[Downloading Unbuntu/APT-Based distro newer packages]"
            sudo apt-get upgrade -y >&- 2>&- & PID1=$!
            ProgressBarSlow & PID2=$!
            wait $PID1
            wait $PID2
            echo -e "${C5} Rebooting in $wait_time seconds to apply upgrades...${Color_Off}"
            if [ "$notifications" == True ]; then
                  notify-send "Rebooting in $wait_time seconds to apply upgrades"
            fi
            Timer
            sudo reboot >&- 2>&-
      fi
fi

if [ "$option" == "package-upgrade" ] || [ "$option" == "package-update" ]; then
      echo -e "${C3}Please enter a valid package manager:${Color_Off}"
      read answer
      echo " "
      if [ "$answer" == "flatpak" ] || [ "$answer" == "flathub" ]; then
            if [ "$flatpak" == False ]; then
                  echo -e "${bold}Sorry; but it seems that flatpak has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable flatpak"
            fi
            if [ "$flatpak" == True ]; then
                  echo -e "${C3}Please enter a valid flatpak package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying upgrading package '$package_install_name' from flathub repo...${Color_Off}"
                  echo " "
                  echo "[Upgrading From Flatpak]"
                  flatpak update $prefered_flatpak_repo "$package_install_name" -y --noninteractive >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "snap" ] || [ "$answer" == "snapcraft" ]; then
            if [ "$snap" == False ]; then
                  echo -e "${bold}Sorry; but it seems that snap has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable snap"
            fi
            if [ "$snap" == True ]; then
                  echo -e "${C3}Please enter a valid snapcraft package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleeep 3
                  echo -e "${C5}Trying upgrading package '$package_install_name' from snapcraft repo...${Color_Off}"
                  echo " "
                  echo "[Upgrading From Snapcraft]"
                  sudo snap refresh "$package_install_name" -y >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "yum" ]; then
            if [ "$yum" == False ]; then
                  echo -e "${bold}Sorry; but it seems that yum has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable yum"
            fi
            if [ "$yum" == True ]; then
                  echo -e "${C3}Please enter a valid yum package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying upgrading package '$package_install_name' from yum repo...${Color_Off}"
                  echo " "
                  echo "[Upgrading From Yum]"
                  sudo yum upgrade -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "cargo" ]; then
            if [ "$cargo" == False ]; then
                  echo -e "${bold}Sorry; but it seems that cargo has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable cargo"
            fi
            if [ "$cargo" == True ]; then
                  echo -e "${C3}Please enter a valid cargo package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying upgrading package '$package_install_name' from cargo repo...${Color_Off}"
                  echo " "
                  echo "[Upgrading From Cargo]"
                  sudo cargo update  -p -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "dnf" ]; then
            if [ "$dnf" == False ]; then
                  echo -e "${bold}Sorry; but it seems that dnf has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable dnf"
            fi
            if [ "$dnf" == True ]; then
                  echo -e "${C3}Please enter a valid dnf package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying upgrading package '$package_install_name' from dnf repo...${Color_Off}"
                  echo " "
                  echo "[Upgrading From Dnf]"
                  sudo dnf upgrade -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "apt" ]; then
            if [ "$apt" == False ]; then
                  echo -e "${bold}Sorry; but it seems that apt has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable apt"
            fi
            if [ "$apt" == True ]; then
                  echo -e "${C3}Please enter a valid apt package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying upgrading package '$package_install_name' from apt repo...${Color_Off}"
                  echo " "
                  echo "[Upgrading From APT]"
                  sudo apt upgrade -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "zypp" ] || [ "$answer" == "zypper" ]; then
            if [ "$zypp" == False ]; then
                  echo -e "${bold}Sorry; but it seems that zypp has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable zypp"
            fi
            if [ "$zypp" == True ]; then
                  echo -e "${bold}Sorry; but it seems that package upgrade specification is not avaible for zypp${normal}"
                  echo -e "It will maybe in the future"
            fi
      fi
fi

if [ "$option" == "help" ]; then
	echo -e  "${B2}HELP PAGE:${Color_Off}"
	echo -e " "
	echo -e  "${B5}OPTIONS${normal} ${C3}(First entry):${Color_Off}"
	echo -e " "
	echo -e  "${B6}autoremove${normal}: remove all unneeded packages that were originally installed as dependencies"
      echo -e  "${B6}colors/color-test${normal}: show an output text to test color palette"
      echo -e  "${B6}clean/auto-clean/purge${normal}: use the clean command of all your enabled package managers (clean cache)"
      echo -e  "${B6}clean-all/auto-clean-all/purge-all${normal}: try to use the clean command of all package managers compatible, even the ones not enabled (ex: dnf clean)"
      echo -e  "${B6}config/customize${normal}: customize config.yaml"
      echo -e  "${B6}current-config${normal}: echo to the terminal your current config"
      echo -e  "${B6}downgrade${normal}: downgrade a package to one of your package manager"
      echo -e  "${B6}help${normal}: show this page"
      echo -e  "${B6}info/get-info${normal}: get infos about a specific package"
      echo -e  "${B6}install/add${normal}: install/add a new package to one of your package manager"
      echo -e  "${B6}list/packages${normal}: list packages installed on your package managers one by one in $prefered_text_editor"
      echo -e  "${B6}package-upgrade/package-update${normal}: upgrade a specific package of a specific package manager"
      echo -e  "${B6}reinstall${normal}: reinstall a package to one of your package manager (remove then install the selected package)"
      echo -e  "${B6}reset/config-reset${normal}: reset config ($HOME/cromha-manager-config.yaml file)"
      echo -e  "${B6}search/find${normal}: search and find packages on enabled package managers"
      echo -e  "${B6}uninstall/remove${normal}: uninstall/remove a package to one of your package manager"
      echo -e  "${B6}upgrade/update${normal}: upgrade all your packages installed from activated package managers"
      echo -e  "${B6}upgrade-all/update-all${normal}: try to upgrade all package managers packages, even the one not installed"
      echo -e  "${B6}sys-upgrade/system-upgrade${normal}: upgrade your system ${B1}[compatibility: fedora based systems and unbuntu/apt based systems]${Color_Off} (upgrade from Fedora 36 to 37 for example)" 
	echo -e " "
	echo -e  "${B5}PARAMETERS${normal} ${C3}(Second and Third entry):${Color_Off}"
	echo -e " "
	echo -e  "${B6}-clean/-auto-clean/-purge${normal}: use the clean command of all your enabled package managers (clean cache)"
	echo -e  "${B6}-exit${normal}: close terminal window after executing option"
	echo -e  "${B6}-reboot/-restart${normal}: reboot your system after executing option (alias: -restart)"
	echo -e  "${B6}-shutdown/-poweroff${normal}: shutdown your system after executing option (alias: -poweroff)"
      echo -e  "${B6}-autoremove${normal}: remove all unneeded packages that were originally installed as dependencies"
      echo -e " "
      echo -e  "${B5}CUSTOMIZATION:${Color_Off}"
      echo -e  "Go to: ${B4}https://github.com/OcelotWalrus/Bash-Multi-Package-Manager${Color_Off} for more information"
	disable_done=True
fi

if [ "$option" == "customize" ] || [ "$option" == "config" ]; then
      echo -e "${C5}Opening config.yaml...${Color_Off}"
      sleep 1
      $prefered_text_editor $HOME/cromha-manager-config.yaml >&- 2>&-
      sleep .1
fi

if [ "$option" == "clean" ] || [ "$option" == "auto-clean" ] || [ "$option" == "purge" ]; then
	echo -e "${C5}Cleaning cashed data...${Color_Off}"
      echo " "
	if [ $flatpak == True ]; then
            echo -e "[Cleaning Flatpak]"
            sudo rm -rfv /var/tmp/flatpak-cache >&- 2>&- & PIDFLATPAK1=$!
            ProgressBarFast & PIDFLATPAK2=$!
            wait $PIDFLATPAK1
            wait $PIDFLATPAK2
      fi
      if [ $snap == True ]; then
            echo -e "[Cleaning Snapcraft]"
            sudo rm -rvf /var/lib/snapd/cache >&- 2>&- & PIDSNAP1=$!
            ProgressBarFast & PIDSNAP2=$!
            wait $PIDSNAP1
            wait $PIDSNAP2
      fi
      if [ $yum == True ]; then
            echo -e "[Cleaning Yum]"
            sudo yum clean all >&- 2>&- & PIDYUM1=$!
            ProgressBarFast & PIDYUM2=$!
            wait $PIDYUM1
            wait $PIDYUM2
      fi
      if [ $cargo == True ]; then
            echo -e "[Cleaning Cargo]"
            sudo cargo clean >&- 2>&- & PIDCARGO1=$!
            ProgressBarFast & PIDCARGO2=$!
            wait $PIDCARGO1
            wait $PIDCARGO2
      fi
      if [ $dnf == True ]; then
            echo -e "[Cleaning Dnf]"
            sudo dnf clean all >&- 2>&- & PIDDNF1=$!
            ProgressBarFast & PIDDNF2=$!
            wait $PIDDNF1
            wait $PIDDNF2
      fi
      if [ $apt == True ]; then
            echo -e "[Cleaning APT]"
            sudo apt autoclean >&- 2>&- & PIDAPT1=$!
            ProgressBarFast & PIDAPT2=$!
            sudo apt purge >&- 2>&- & PIDAPT3=$!
            wait $PIDAPT1
            wait $PIDAPT2
            wait $PIDAPT3
      fi
      if [ $zypp == True ]; then
            echo -e "[Cleaning Zypp]"
            sudo zypper clean >&- 2>&- & PIDZYPP1=$!
            ProgressBarFast & PIDZYPP2=$!
            wait $PIDZYPP1
            wait $PIDZYPP2
      fi
      echo -e " "
fi

if [ "$option" == "clean-all" ] || [ "$option" == "auto-clean-all" ] || [ "$option" == "purge-all" ]; then
	echo -e "${C5}Cleaning cashed data...${Color_Off}"
      echo " "
      echo -e "[Cleaning Flatpak]"
      sudo rm -rfv /var/tmp/flatpak-cache >&- 2>&- & PIDFLATPAK1=$!
      ProgressBarFast & PIDFLATPAK2=$!
      wait $PIDFLATPAK1
      wait $PIDFLATPAK2
      echo -e "[Cleaning Snapcraft]"
      sudo rm -rvf /var/lib/snapd/cache >&- 2>&- & PIDSNAP1=$!
      ProgressBarFast & PIDSNAP2=$!
      wait $PIDSNAP1
      wait $PIDSNAP2
      echo -e "[Cleaning Yum]"
      sudo yum clean all >&- 2>&- & PIDYUM1=$!
      ProgressBarFast & PIDYUM2=$!
      wait $PIDYUM1
      wait $PIDYUM2
      echo -e "[Cleaning Cargo]"
      sudo cargo clean >&- 2>&- & PIDCARGO1=$!
      ProgressBarFast & PIDCARGO2=$!
      wait $PIDCARGO1
      wait $PIDCARGO2
      echo -e "[Cleaning Dnf]"
      sudo dnf clean all >&- 2>&- & PIDDNF1=$!
      ProgressBarFast & PIDDNF2=$!
      wait $PIDDNF1
      wait $PIDDNF2
      echo -e "[Cleaning APT]"
      sudo apt autoclean >&- 2>&- & PIDAPT1=$!
      ProgressBarFast & PIDAPT2=$!
      sudo apt purge >&- 2>&- & PIDAPT3=$!
      wait $PIDAPT1
      wait $PIDAPT2
      wait $PIDAPT3
      echo -e "[Cleaning Zypp]"
      sudo zypper clean >&- 2>&- & PIDZYPP1=$!
      ProgressBarFast & PIDZYPP2=$!
      wait $PIDZYPP1
      wait $PIDZYPP2
      echo -e " "
fi

if [ "$option" == "reset" ] || [ "$option" == "config-reset" ]; then
      echo -e "${C5}Reseting config located in $HOME/cromha-manager-config.yaml file...${Color_Off}"
      sudo rm $HOME/cromha-manager-config.yaml
      echo -e "$default_config" >> $HOME/cromha-manager-config.yaml
      chmod 777 $HOME/cromha-manager-config.yaml
fi

if [ "$option" == "list" ] || [ "$option" == "packages" ]; then
      echo -e "${C5}Searching for your installed packages...${Color_Off}"
      echo -e "${C5}Warning, packages list file can be very big...${Color_Off}"
      echo -e " "
      if [ $flatpak == True ]; then
            echo -e "${C3}Would you want to get the list of your flatpak packages ? (y/n)${Color_Off}"
            read answer_flatpak
      fi
      if [ $snap == True ]; then
            echo -e "${C3}Would you want to get the list of your snapcraft packages ? (y/n)${Color_Off}"
            read answer_snapcraft
      fi
      if [ $yum == True ]; then
            echo -e "${C3}Would you want to get the list of your yum packages ? (y/n)${Color_Off}"
            read answer_yum
      fi
      if [ $cargo == True ]; then
            echo -e "${C3}Would you want to get the list of your cargo packages ? (y/n)${Color_Off}"
            read answer_cargo
      fi
      if [ $dnf == True ]; then
            echo -e "${C3}Would you want to get the list of your dnf packages ? (y/n)${Color_Off}"
            read answer_dnf
      fi
      if [ $apt == True ]; then
            echo -e "${C3}Would you want to get the list of your apt packages ? (y/n)${Color_Off}"
            read answer_apt
      fi
      if [ $zypp == True ]; then
            echo -e "${C3}Would you want to get the list of your zypp packages ? (y/n)${Color_Off}"
            read answer_zypp
      fi
      if [ "$answer_flatpak" == "y" ]; then
            flatpak_list=$(flatpak list)
            echo -e "[FLATPAK OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo -e "$flatpak_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$answer_snapcraft" == "y" ]; then
            snap_list=$(snap list)
            echo -e "[SNAPCRAFT OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo -e "$snap_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$answer_yum" == "y" ]; then
            yum_list=$(yum list)
            echo -e "[YUM OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo -e "$yum_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$answer_cargo" == "y" ]; then
            cargo_list=$(cargo install --list)
            echo -e "[CARGO OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo -e "$cargo_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$answer_dnf" == "y" ]; then
            dnf_list=$(dnf list)
            echo -e "[DNF OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo -e "$dnf_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$answer_apt" == "y" ]; then
            apt_list=$(apt list --installed)
            echo -e "[APT OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo -e "$apt_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$answer_apt" == "y" ]; then
            apt_list=$(apt list --installed)
            echo -e "[APT OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo -e "$apt_list" >> $HOME/packages-list-cromha.temp
      fi
      if [ "$answer_zypp" == "y" ]; then
            zypp_list=$(zypper search -i)
            echo -e "[ZYPPER OUTPUT]" >> $HOME/packages-list-cromha.temp
            echo -e "$zypp_list" >> $HOME/packages-list-cromha.temp
      fi
      echo ""
      echo -e "${C5}Opening temporary file where is stored installed packages list..."
      if [ "$notifications" == True ]; then
            notify-send "Installed packages listing finished"
      fi
      sleep 1
      $prefered_text_editor $HOME/packages-list-cromha.temp >&- 2>&-
      sleep 1
      echo -e "Deleting temporary file..."
      rm $HOME/packages-list-cromha.temp >&- 2>&-
fi

if [ "$option" == "search" ] || [ "$option" == "find" ]; then
      echo -e "${C3}Enter package name:${Color_Off}"
      read package_find_name
      echo -e " "
      CheckNetwork
      sleep 3
      echo -e "${C5}Updating package managers...${Color_Off}"
      sleep 1
      echo -e "${C5}Searching for matches..."${Color_Off}
      echo -e " "
      if [ "$flatpak" == True ]; then
            echo -e "[Searching On Flatpak]"
            echo -e "[FLATPAK OUTPUT]" >> $HOME/cromha-manager-search.temp
            flatpak search "$package_find_name" >> $HOME/cromha-manager-search.temp & PIDSEARCH1=$!
            ProgressBarFast & PIDSEARCH2=$!
            wait $PIDSEARCH1
            wait $PIDSEARCH2
            echo -e " "
      fi
      if [ "$snap" == True ]; then
            echo -e "[Searching On Snapcraft]"
            echo -e "[SNAPCRAFT OUTPUT]" >> $HOME/cromha-manager-search.temp
            snap find "$package_find_name" >> $HOME/cromha-manager-search.temp & PIDSEARCH1=$!
            ProgressBarFast & PIDSEARCH2=$!
            wait $PIDSEARCH1
            wait $PIDSEARCH2
            echo -e " "
      fi
      if [ "$yum" == True ]; then
            echo -e "[Searching On Yum]"
            echo -e "[YUM OUTPUT]" >> $HOME/cromha-manager-search.temp
            yum search "$package_find_name" >> $HOME/cromha-manager-search.temp & PIDSEARCH1=$!
            ProgressBarFast & PIDSEARCH2=$!
            wait $PIDSEARCH1
            wait $PIDSEARCH2
            echo -e " "
      fi
      if [ "$cargo" == True ]; then
            echo -e "[Searching On Cargo]"
            echo -e "[CARGO OUTPUT]" >> $HOME/cromha-manager-search.temp
            cargo search "$package_find_name" >> $HOME/cromha-manager-search.temp & PIDSEARCH1=$!
            ProgressBarFast & PIDSEARCH2=$!
            wait $PIDSEARCH1
            wait $PIDSEARCH2
            echo -e " "
      fi
      if [ "$dnf" == True ]; then
            echo -e "[Searching On DNF]"
            echo -e "[DNF OUTPUT]" >> $HOME/cromha-manager-search.temp
            dnf search "$package_find_name" >> $HOME/cromha-manager-search.temp & PIDSEARCH1=$!
            ProgressBarFast & PIDSEARCH2=$!
            wait $PIDSEARCH1
            wait $PIDSEARCH2
            echo -e " "
      fi
      if [ "$apt" == True ]; then
            echo -e "[Searching On APT]"
            echo -e "[APT OUTPUT]" >> $HOME/cromha-manager-search.temp
            apt search "$package_find_name" >> $HOME/cromha-manager-search.temp & PIDSEARCH1=$!
            ProgressBarFast & PIDSEARCH2=$!
            wait $PIDSEARCH1
            wait $PIDSEARCH2
            echo -e " "
      fi
      if [ "$zypp" == True ]; then
            echo -e "[Searching On Zypp]"
            echo -e "[ZYPPER OUTPUT]" >> $HOME/cromha-manager-search.temp
            zypper search "$package_find_name" >> $HOME/cromha-manager-search.temp & PIDSEARCH1=$!
            ProgressBarFast & PIDSEARCH2=$!
            wait $PIDSEARCH1
            wait $PIDSEARCH2
            echo -e " "
      fi
      echo -e "${C5}Opening search temp file..."
      sleep 1
      $prefered_text_editor $HOME/cromha-manager-search.temp >&- 2>&-
      sudo rm $HOME/cromha-manager-search.temp
fi

if [ "$option" == "info" ] || [ "$option" == "get-info" ]; then
      CheckNetwork
      sleep 3
      echo ""
      echo -e "${C3}Please select a valid package manager:${Color_Off}"
      read answer
      echo " "
      if [ "$answer" == "flatpak" ] || [ "$answer" == "flathub" ]; then
            if [ "$flatpak" == False ]; then
                  echo -e "${bold}Sorry; but it seems that flatpak has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable flatpak"
            fi
            if [ "$flatpak" == True ]; then
                  echo -e "${C3}Please enter a valid flatpak package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_info_name
                  echo ""
                  echo -e "[Getting Info]"
                  ProgressBarFast & PID1=$!
                  echo "[$package_info_name PACKAGE INFO]" >> $HOME/cromha-manager-info.tmp
                  flatpak info "$package_info_name" >> $HOME/cromha-manager-info.tmp & PID2=$!
                  wait $PID1
                  wait $PID2
                  echo " "
                  echo -e "${C5}Opening temp file where stored info about the package..."
                  sleep 1
                  $prefered_text_editor $HOME/cromha-manager-info.tmp >&- 2>&-
                  rm $HOME/cromha-manager-info.tmp
            fi
      fi
      if [ "$answer" == "snap" ] || [ "$answer" == "snapcraft" ]; then
            if [ "$snap" == False ]; then
                  echo -e "${bold}Sorry; but it seems that snapcraft has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable snapcraft"
            fi
            if [ "$snap" == True ]; then
                  echo -e "${C3}Please enter a valid snap package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_info_name
                  echo ""
                  echo -e "[Getting Info]"
                  ProgressBarFast & PID1=$!
                  echo "[$package_info_name PACKAGE INFO]" >> $HOME/cromha-manager-info.tmp
                  snap info "$package_info_name" >> $HOME/cromha-manager-info.tmp & PID2=$!
                  wait $PID1
                  wait $PID2
                  echo " "
                  echo -e "${C5}Opening temp file where stored info about the package..."
                  sleep 1
                  $prefered_text_editor $HOME/cromha-manager-info.tmp
                  rm $HOME/cromha-manager-info.tmp
            fi
      fi
      if [ "$answer" == "yum" ]; then
            if [ "$yum" == False ]; then
                  echo -e "${bold}Sorry; but it seems that yum has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable yum"
            fi
            if [ "$yum" == True ]; then
                  echo -e "${C3}Please enter a valid yum package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_info_name
                  echo ""
                  echo -e "[Getting Info]"
                  ProgressBarFast & PID1=$!
                  echo "[$package_info_name PACKAGE INFO]" >> $HOME/cromha-manager-info.tmp
                  yum info "$package_info_name" >> $HOME/cromha-manager-info.tmp & PID2=$!
                  wait $PID1
                  wait $PID2
                  echo " "
                  echo -e "${C5}Opening temp file where stored info about the package..."
                  sleep 1
                  $prefered_text_editor $HOME/cromha-manager-info.tmp
                  rm $HOME/cromha-manager-info.tmp
            fi
      fi
      if [ "$answer" == "cargo" ]; then
            if [ "$cargo" == False ]; then
                  echo -e "${bold}Sorry; but it seems that cargo has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable cargo"
            fi
            if [ "$cargo" == True ]; then
                  echo -e "${bold}Sorry but this feature is not enaled for cargo. Maybe it will in the future...${normal}"
            fi
      fi
      if [ "$answer" == "dnf" ]; then
            if [ "$dnf" == False ]; then
                  echo -e "${bold}Sorry; but it seems that dnf has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable dnf"
            fi
            if [ "$dnf" == True ]; then
                  echo -e "${C3}Please enter a valid dnf package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_info_name
                  echo ""
                  echo -e "[Getting Info]"
                  ProgressBarFast & PID1=$!
                  echo "[$package_info_name PACKAGE INFO]" >> $HOME/cromha-manager-info.tmp
                  dnf info "$package_info_name" >> $HOME/cromha-manager-info.tmp & PID2=$!
                  wait $PID1
                  wait $PID2
                  echo " "
                  echo -e "${C5}Opening temp file where stored info about the package..."
                  sleep 1
                  $prefered_text_editor $HOME/cromha-manager-info.tmp
                  rm $HOME/cromha-manager-info.tmp
            fi
      fi
      if [ "$answer" == "apt" ]; then
            if [ "$apt" == False ]; then
                  echo -e "${bold}Sorry; but it seems that apt has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable apt"
            fi
            if [ "$apt" == True ]; then
                  echo -e "${C3}Please enter a valid apt package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_info_name
                  echo ""
                  echo -e "[Getting Info]"
                  ProgressBarFast & PID1=$!
                  echo "[$package_info_name PACKAGE INFO]" >> $HOME/cromha-manager-info.tmp
                  apt info "$package_info_name" >> $HOME/cromha-manager-info.tmp & PID2=$!
                  wait $PID1
                  wait $PID2
                  echo " "
                  echo -e "${C5}Opening temp file where stored info about the package..."
                  sleep 1
                  $prefered_text_editor $HOME/cromha-manager-info.tmp
                  rm $HOME/cromha-manager-info.tmp
            fi
      fi
      if [ "$answer" == "zypp" ] || [ "$answer" == "zypper" ]; then
            if [ "$zypp" == False ]; then
                  echo -e "${bold}Sorry; but it seems that zypp has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable zypp"
            fi
            if [ "$zypp" == True ]; then
                  echo -e "${C3}Please enter a valid apt package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_info_name
                  echo ""
                  echo -e "[Getting Info]"
                  ProgressBarFast & PID1=$!
                  echo "[$package_info_name PACKAGE INFO]" >> $HOME/cromha-manager-info.tmp
                  zypp info "$package_info_name" >> $HOME/cromha-manager-info.tmp & PID2=$!
                  wait $PID1
                  wait $PID2
                  echo " "
                  echo -e "${C5}Opening temp file where stored info about the package..."
                  sleep 1
                  $prefered_text_editor $HOME/cromha-manager-info.tmp
                  rm $HOME/cromha-manager-info.tmp
            fi
      fi
fi

if [ "$option" == "install" ] || [ "$option" == "add" ]; then
      echo -e "${C3}Please enter a valid package manager:${Color_Off}"
      read answer
      echo " "
      if [ "$answer" == "flatpak" ] || [ "$answer" == "flathub" ]; then
            if [ "$flatpak" == False ]; then
                  echo -e "${bold}Sorry; but it seems that flatpak has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable flatpak"
            fi
            if [ "$flatpak" == True ]; then
                  echo -e "${C3}Please enter a valid flatpak package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying installing package '$package_install_name' from flathub repo...${Color_Off}"
                  echo " "
                  echo "[Installing From Flatpak]"
                  flatpak install $prefered_flatpak_repo "$package_install_name" -y --noninteractive >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "snap" ] || [ "$answer" == "snapcraft" ]; then
            if [ "$snap" == False ]; then
                  echo -e "${bold}Sorry; but it seems that snap has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable snap"
            fi
            if [ "$snap" == True ]; then
                  echo -e "${C3}Please enter a valid snapcraft package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying installing package '$package_install_name' from snapcraft repo...${Color_Off}"
                  echo " "
                  echo "[Installing From Snapcraft]"
                  sudo snap install "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "yum" ]; then
            if [ "$yum" == False ]; then
                  echo -e "${bold}Sorry; but it seems that yum has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable yum"
            fi
            if [ "$yum" == True ]; then
                  echo -e "${C3}Please enter a valid yum package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying installing package '$package_install_name' from yum repo...${Color_Off}"
                  echo " "
                  echo "[Installing From Yum]"
                  sudo yum install -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "cargo" ]; then
            if [ "$cargo" == False ]; then
                  echo -e "${bold}Sorry; but it seems that cargo has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable cargo"
            fi
            if [ "$cargo" == True ]; then
                  echo -e "${C3}Please enter a valid cargo package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying installing package '$package_install_name' from cargo repo...${Color_Off}"
                  echo " "
                  echo "[Installing From Cargo]"
                  sudo cargo install -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "dnf" ]; then
            if [ "$dnf" == False ]; then
                  echo -e "${bold}Sorry; but it seems that dnf has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable dnf"
            fi
            if [ "$dnf" == True ]; then
                  echo -e "${C3}Please enter a valid dnf package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying installing package '$package_install_name' from dnf repo...${Color_Off}"
                  echo " "
                  echo "[Installing From Dnf]"
                  sudo dnf install -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "apt" ]; then
            if [ "$apt" == False ]; then
                  echo -e "${bold}Sorry; but it seems that apt has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable apt"
            fi
            if [ "$apt" == True ]; then
                  echo -e "${C3}Please enter a valid apt package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying installing package '$package_install_name' from apt repo...${Color_Off}"
                  echo " "
                  echo "[Installing From APT]"
                  sudo apt install -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "zypp" ] || [ "$answer" == "zypper" ]; then
            if [ "$zypp" == False ]; then
                  echo -e "${bold}Sorry; but it seems that zypp has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable zypp"
            fi
            if [ "$zypp" == True ]; then
                  echo -e "${C3}Please enter a valid zypp package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying installing package '$package_install_name' from zypp repo...${Color_Off}"
                  echo " "
                  echo "[Installing From Zypp]"
                  sudo zypp install -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
fi

if [ "$option" == "remove" ] || [ "$option" == "uninstall" ]; then
      echo -e "${C3}Please enter a valid package manager:${Color_Off}"
      read answer
      echo " "
      if [ "$answer" == "flatpak" ] || [ "$answer" == "flathub" ]; then
            if [ "$flatpak" == False ]; then
                  echo -e "${bold}Sorry; but it seems that flatpak has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable flatpak"
            fi
            if [ "$flatpak" == True ]; then
                  echo -e "${C3}Please enter a valid flatpak package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  echo -e "${C5}Trying uninstalling package '$package_install_name'...${Color_Off}"
                  echo " "
                  echo "[Removing From Flatpak]"
                  flatpak uninstall "$package_install_name" -y --noninteractive >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "snap" ] || [ "$answer" == "snapcraft" ]; then
            if [ "$snap" == False ]; then
                  echo -e "${bold}Sorry; but it seems that snap has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable snap"
            fi
            if [ "$snap" == True ]; then
                  echo -e "${C3}Please enter a valid snapcraft package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  echo -e "${C5}Trying removing package '$package_install_name'...${Color_Off}"
                  echo " "
                  echo "[Removing From Snapcraft]"
                  sudo snap remove "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "yum" ]; then
            if [ "$yum" == False ]; then
                  echo -e "${bold}Sorry; but it seems that yum has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable yum"
            fi
            if [ "$yum" == True ]; then
                  echo -e "${C3}Please enter a valid yum package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  echo -e "${C5}Trying removing package '$package_install_name'...${Color_Off}"
                  echo " "
                  echo "[Removing From Yum]"
                  sudo yum remove -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "cargo" ]; then
            if [ "$cargo" == False ]; then
                  echo -e "${bold}Sorry; but it seems that cargo has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable cargo"
            fi
            if [ "$cargo" == True ]; then
                  echo -e "${C3}Please enter a valid cargo package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  echo -e "${C5}Trying removing package '$package_install_name'...${Color_Off}"
                  echo " "
                  echo "[Removing From Cargo]"
                  sudo cargo uninstall -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "dnf" ]; then
            if [ "$dnf" == False ]; then
                  echo -e "${bold}Sorry; but it seems that dnf has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable dnf"
            fi
            if [ "$dnf" == True ]; then
                  echo -e "${C3}Please enter a valid dnf package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  echo -e "${C5}Trying removing package '$package_install_name'...${Color_Off}"
                  echo " "
                  echo "[Removing From Dnf]"
                  sudo dnf remove -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "apt" ]; then
            if [ "$apt" == False ]; then
                  echo -e "${bold}Sorry; but it seems that apt has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable apt"
            fi
            if [ "$apt" == True ]; then
                  echo -e "${C3}Please enter a valid apt package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  echo -e "${C5}Trying removing package '$package_install_name'...${Color_Off}"
                  echo " "
                  echo "[Removing From APT]"
                  sudo apt uninstall -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "zypp" ] || [ "$answer" == "zypper" ]; then
            if [ "$zypp" == False ]; then
                  echo -e "${bold}Sorry; but it seems that zypp has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable zypp"
            fi
            if [ "$zypp" == True ]; then
                  echo -e "${C3}Please enter a valid zypp package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  echo -e "${C5}Trying removing package '$package_install_name'...${Color_Off}"
                  echo " "
                  echo "[Removing From Zypp]"
                  sudo zypp remove -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
fi

if [ "$option" == "reinstall" ]; then
      echo -e "${C3}Please enter a valid package manager:${Color_Off}"
      read answer
      echo " "
      if [ "$answer" == "flatpak" ] || [ "$answer" == "flathub" ]; then
            if [ "$flatpak" == False ]; then
                  echo -e "${bold}Sorry; but it seems that flatpak has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable flatpak"
            fi
            if [ "$flatpak" == True ]; then
                  echo -e "${C3}Please enter a valid flatpak package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying reinstalling package '$package_install_name' from flathub repo...${Color_Off}"
                  echo " "
                  echo "[Reinstalling From Flatpak]"
                  flatpak install $prefered_flatpak_repo --reinstall "$package_install_name" -y --noninteractive >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "snap" ] || [ "$answer" == "snapcraft" ]; then
            if [ "$snap" == False ]; then
                  echo -e "${bold}Sorry; but it seems that snap has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable snap"
            fi
            if [ "$snap" == True ]; then
                  echo -e "${C3}Please enter a valid snapcraft package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying reinstalling package '$package_install_name' from snapcraft repo...${Color_Off}"
                  echo " "
                  echo "[Reinstalling From Snapcraft]"
                  sudo snap remove "$package_install_name" >&- 2>&- & PID1=$!
                  sudo snap install "$package_install_name" >&- 2>&- & PID3=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
                  wait $PID3
            fi
      fi
      if [ "$answer" == "yum" ]; then
            if [ "$yum" == False ]; then
                  echo -e "${bold}Sorry; but it seems that yum has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable yum"
            fi
            if [ "$yum" == True ]; then
                  echo -e "${C3}Please enter a valid yum package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying reinstalling package '$package_install_name' from yum repo...${Color_Off}"
                  echo " "
                  echo "[Reinstalling From Yum]"
                  sudo yum reinstall -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "cargo" ]; then
            if [ "$cargo" == False ]; then
                  echo -e "${bold}Sorry; but it seems that cargo has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable cargo"
            fi
            if [ "$cargo" == True ]; then
                  echo -e "${C3}Please enter a valid cargo package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying reinstalling package '$package_install_name' from cargo repo...${Color_Off}"
                  echo " "
                  echo "[Reinstalling From Cargo]"
                  sudo cargo remove -y "$package_install_name" >&- 2>&- & PID3=$!
                  sudo cargo install -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
                  wait $PID3
            fi
      fi
      if [ "$answer" == "dnf" ]; then
            if [ "$dnf" == False ]; then
                  echo -e "${bold}Sorry; but it seems that dnf has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable dnf"
            fi
            if [ "$dnf" == True ]; then
                  echo -e "${C3}Please enter a valid dnf package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying reinstalling package '$package_install_name' from dnf repo...${Color_Off}"
                  echo " "
                  echo "[Reinstalling From Dnf]"
                  sudo dnf reinstall -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "apt" ]; then
            if [ "$apt" == False ]; then
                  echo -e "${bold}Sorry; but it seems that apt has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable apt"
            fi
            if [ "$apt" == True ]; then
                  echo -e "${C3}Please enter a valid apt package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying reinstalling package '$package_install_name' from apt repo...${Color_Off}"
                  echo " "
                  echo "[Reinstalling From APT]"
                  sudo apt reinstall -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "zypp" ] || [ "$answer" == "zypper" ]; then
            if [ "$zypp" == False ]; then
                  echo -e "${bold}Sorry; but it seems that zypp has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable zypp"
            fi
            if [ "$zypp" == True ]; then
                  echo -e "${C3}Please enter a valid zypp package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying reinstalling package '$package_install_name' from zypp repo...${Color_Off}"
                  echo " "
                  echo "[Reinstalling From Zypp]"
                  sudo zypp remove -y "$package_install_name" >&- 2>&- & PID3=$!
                  sudo zypp install -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
                  wait $PID3
            fi
      fi
fi

if [ "$option" == "downgrade" ]; then
      echo -e "${C3}Please enter a valid package manager:${Color_Off}"
      read answer
      echo " "
      if [ "$answer" == "flatpak" ] || [ "$answer" == "flathub" ]; then
            if [ "$flatpak" == False ]; then
                  echo -e "${bold}Sorry; but it seems that flatpak has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable flatpak"
            fi
            if [ "$flatpak" == True ]; then
                  echo -e "${bold}Sorry; but it seems that flatpak downgrade is not avaible${normal}"
                  echo -e "It will maybe in the future"
            fi
      fi
      if [ "$answer" == "snap" ] || [ "$answer" == "snapcraft" ]; then
            if [ "$snap" == False ]; then
                  echo -e "${bold}Sorry; but it seems that snap has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable snap"
            fi
            if [ "$snap" == True ]; then
                  if [ "$flatpak" == True ]; then
                  echo -e "${bold}Sorry; but it seems that snapcraft downgrade is not avaible${normal}"
                  echo -e "It will maybe in the future"
            fi
            fi
      fi
      if [ "$answer" == "yum" ]; then
            if [ "$yum" == False ]; then
                  echo -e "${bold}Sorry; but it seems that yum has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable yum"
            fi
            if [ "$yum" == True ]; then
                  echo -e "${C3}Please enter a valid yum package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying downgrading package '$package_install_name' from yum repo...${Color_Off}"
                  echo " "
                  echo "[Downgrading From Yum]"
                  sudo yum downgrade -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "cargo" ]; then
            if [ "$cargo" == False ]; then
                  echo -e "${bold}Sorry; but it seems that cargo has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable cargo"
            fi
            if [ "$cargo" == True ]; then
                  echo -e "${bold}Sorry; but it seems that cargo downgrade is not avaible${normal}"
                  echo -e "It will maybe in the future"
            fi
      fi
      if [ "$answer" == "dnf" ]; then
            if [ "$dnf" == False ]; then
                  echo -e "${bold}Sorry; but it seems that dnf has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable dnf"
            fi
            if [ "$dnf" == True ]; then
                  echo -e "${C3}Please enter a valid dnf package id (Use cromha-manager find/search to find an id):${Color_Off}"
                  read package_install_name
                  echo " "
                  CheckNetwork
                  sleep 3
                  echo -e "${C5}Trying downgrading package '$package_install_name' from dnf repo...${Color_Off}"
                  echo " "
                  echo "[Downgrading From Dnf]"
                  sudo dnf downgrade -y "$package_install_name" >&- 2>&- & PID1=$!
                  ProgressBar & PID2=$!
                  wait $PID1
                  wait $PID2
            fi
      fi
      if [ "$answer" == "apt" ]; then
            if [ "$apt" == False ]; then
                  echo -e "${bold}Sorry; but it seems that apt has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable apt"
            fi
            if [ "$apt" == True ]; then
                  echo -e "${bold}Sorry; but it seems that apt downgrade is not avaible${normal}"
                  echo -e "It will maybe in the future"
            fi
      fi
      if [ "$answer" == "zypp" ] || [ "$answer" == "zypper" ]; then
            if [ "$zypp" == False ]; then
                  echo -e "${bold}Sorry; but it seems that zypp has been disabled on the cromha-manager.yaml config${normal}"
                  echo -e "Hint: run 'cromha-manager config' to enable zypp"
            fi
            if [ "$zypp" == True ]; then
                  echo -e "${bold}Sorry; but it seems that zypp downgrade is not avaible${normal}"
                  echo -e "It will maybe in the future"
            fi
      fi
fi

if [ "$option" == "colors" ] || [ "$option" == "color-test" ]; then
      echo -e "${C5}Loading color paletter...${Color_Off}"
      echo -e "${B6}Note that you can customize to color palette using cromha-manager config/customize${Color_Off}"
      echo " "
      echo -e "Color Palette 0(Normal): ${C0}cromha${Color_Off}"
      echo -e "Color Palette 1(Normal): ${C1}cromha${Color_Off}"
      echo -e "Color Palette 2(Normal): ${C2}cromha${Color_Off}"
      echo -e "Color Palette 3(Normal): ${C3}cromha${Color_Off}"
      echo -e "Color Palette 4(Normal): ${C4}cromha${Color_Off}"
      echo -e "Color Palette 5(Normal): ${C5}cromha${Color_Off}"
      echo -e "Color Palette 6(Normal): ${C6}cromha${Color_Off}"
      echo -e "Color Palette 7(Normal): ${C7}cromha${Color_Off}"
      echo -e "Color Palette 0(${bold}Bold${normal}): ${B0}cromha${Color_Off}"
      echo -e "Color Palette 1(${bold}Bold${normal}): ${B1}cromha${Color_Off}"
      echo -e "Color Palette 2(${bold}Bold${normal}): ${B2}cromha${Color_Off}"
      echo -e "Color Palette 3(${bold}Bold${normal}): ${B3}cromha${Color_Off}"
      echo -e "Color Palette 4(${bold}Bold${normal}): ${B4}cromha${Color_Off}"
      echo -e "Color Palette 5(${bold}Bold${normal}): ${B5}cromha${Color_Off}"
      echo -e "Color Palette 6(${bold}Bold${normal}): ${B6}cromha${Color_Off}"
      echo -e "Color Palette 7(${bold}Bold${normal}): ${B7}cromha${Color_Off}"
fi

if [ "$option" == "current-config" ]; then
      echo -e "${C5}Searching for config file...${Color_Off}"
      echo " "
      echo -e "${C2}CURRENT CONFIG:${Color_Off}"
      current_config=$(cat "$HOME/cromha-manager-config.yaml")
      echo -e "${C3}$current_config${Color_Off}"
fi

# Parameters

# First

if [ "$parameter" == "-clean" ] || [ "$parameter" == "-auto-clean" ] || [ "$parameter" == "-purge" ]; then
      echo -e " "
	echo -e "${C5}Cleaning cashed data...${Color_Off}"
      echo " "
	if [ $flatpak == True ]; then
            echo -e "[Cleaning Flatpak]"
            sudo rm -rfv /var/tmp/flatpak-cache >&- 2>&- & PIDFLATPAK1=$!
            ProgressBarFast & PIDFLATPAK2=$!
            wait $PIDFLATPAK1
            wait $PIDFLATPAK2
      fi
      if [ $snap == True ]; then
            echo -e "[Cleaning Snapcraft]"
            sudo rm -rvf /var/lib/snapd/cache >&- 2>&- & PIDSNAP1=$!
            ProgressBarFast & PIDSNAP2=$!
            wait $PIDSNAP1
            wait $PIDSNAP2
      fi
      if [ $yum == True ]; then
            echo -e "[Cleaning Yum]"
            sudo yum clean all >&- 2>&- & PIDYUM1=$!
            ProgressBarFast & PIDYUM2=$!
            wait $PIDYUM1
            wait $PIDYUM2
      fi
      if [ $cargo == True ]; then
            echo -e "[Cleaning Cargo]"
            sudo cargo clean >&- 2>&- & PIDCARGO1=$!
            ProgressBarFast & PIDCARGO2=$!
            wait $PIDCARGO1
            wait $PIDCARGO2
      fi
      if [ $dnf == True ]; then
            echo -e "[Cleaning Dnf]"
            sudo dnf clean all >&- 2>&- & PIDDNF1=$!
            ProgressBarFast & PIDDNF2=$!
            wait $PIDDNF1
            wait $PIDDNF2
      fi
      if [ $apt == True ]; then
            echo -e "[Cleaning APT]"
            sudo apt autoclean >&- 2>&- & PIDAPT1=$!
            ProgressBarFast & PIDAPT2=$!
            sudo apt purge >&- 2>&- & PIDAPT3=$!
            wait $PIDAPT1
            wait $PIDAPT2
            wait $PIDAPT3
      fi
      if [ $zypp == True ]; then
            echo -e "[Cleaning Zypp]"
            sudo zypper clean >&- 2>&- & PIDZYPP1=$!
            ProgressBarFast & PIDZYPP2=$!
            wait $PIDZYPP1
            wait $PIDZYPP2
      fi
      echo -e " "
fi

if [ "$parameter" == "-exit" ]; then
      echo -e " "
	echo -e "${C5}Closing terminal window in $wait_time secs...${Color_Off}"
      if [ "$notifications" == True ]; then
            notify-send  "Closing terminal window in $wait_time secs..."
      fi
      Timer
      echo " "
      echo -e "${C5}Closing terminal window now...${Color_Off}"
      if [ "$notifications" == True ]; then
            notify-send "Closing terminal window now..."
      fi
	sudo kill -9 $PPID >&- 2>&-
fi

if [ "$parameter" == "-poweroff" ] || [ "$parameter" == "-shutdown" ]; then
      echo " "
	echo -e "${C5}Shutingdown your system in $wait_time seconds..."
      if [ "$notifications" == True ]; then
            notify-send "Shutingdown your system in $wait_time seconds..."
      fi
	Timer
      echo " "
      echo -e "${C5}Shutingdown your system now...${Color_Off}"
      if [ "$notifications" == True ]; then
            notify-send "Shutingdown your system now..."
      fi
	sudo poweroff
fi

if [ "$parameter" == "-reboot" ] || [ "$parameter" == "-restart" ]; then
      echo " "
	echo -e "${C5}Rebooting your system in $wait_time seconds...${Color_Off}"
      if [ "$notifications" == True ]; then
            notify-send "Rebooting your system in $wait_time seconds..."
      fi
	Timer
      echo " "
      echo -e "${C5}Rebooting your system now...${Color_Off}"
      if [ "$notifications" == True ]; then
            notify-send "Rebooting your system now"
      fi
	sudo reboot
fi

if [ "$parameter" == "-autoremove" ]; then
      echo ""
      echo -e "${C5}Looking for uneeded or unused dependencises...${Color_Off}"
      echo -e "${C5}Autoremoving packages...${Color_Off}"
      echo " "
      if [ "$flatpak" == True ]; then
            echo -e "[Autoremoving Flatpak Packages]"
            sudo flatpak uninstall -y --unused >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$snap" == True ]; then
            echo -e ${B1}ERROR: Sorry but snapcraft autoremove is not yet supported${normal} $progress_bar_error
      fi
      if [ "$yum" == True ]; then
            echo -e "[Autoremoving Yum Packages]"
            sudo yum autoremove -y >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$cargo" == True ]; then
            echo -e ${B1}ERROR: Sorry but cargo autoremove is not yet supported${normal} $progress_bar_error
      fi
      if [ "$dnf" == True ]; then
            echo -e "[Autoremoving DNF Packages]"
            sudo dnf autoremove -y >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$apt" == True ]; then
            echo -e "[Autoremoving APT Packages]"
            sudo apt autoremove -y >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$zypp" == True ]; then
            echo -e ${B1}ERROR: Sorry but zypper autoremove is not yet supported${normal} $progress_bar_error
      fi
fi

# Second

if [ "$parameter2" == "-clean" ] || [ "$parameter2" == "-auto-clean" ] || [ "$parameter2" == "-purge" ]; then
      echo -e " "
	echo -e "${C5}Cleaning cashed data...${Color_Off}"
      echo " "
	if [ $flatpak == True ]; then
            echo -e "[Cleaning Flatpak]"
            sudo rm -rfv /var/tmp/flatpak-cache >&- 2>&- & PIDFLATPAK1=$!
            ProgressBarFast & PIDFLATPAK2=$!
            wait $PIDFLATPAK1
            wait $PIDFLATPAK2
      fi
      if [ $snap == True ]; then
            echo -e "[Cleaning Snapcraft]"
            sudo rm -rvf /var/lib/snapd/cache >&- 2>&- & PIDSNAP1=$!
            ProgressBarFast & PIDSNAP2=$!
            wait $PIDSNAP1
            wait $PIDSNAP2
      fi
      if [ $yum == True ]; then
            echo -e "[Cleaning Yum]"
            sudo yum clean all >&- 2>&- & PIDYUM1=$!
            ProgressBarFast & PIDYUM2=$!
            wait $PIDYUM1
            wait $PIDYUM2
      fi
      if [ $cargo == True ]; then
            echo -e "[Cleaning Cargo]"
            sudo cargo clean >&- 2>&- & PIDCARGO1=$!
            ProgressBarFast & PIDCARGO2=$!
            wait $PIDCARGO1
            wait $PIDCARGO2
      fi
      if [ $dnf == True ]; then
            echo -e "[Cleaning Dnf]"
            sudo dnf clean all >&- 2>&- & PIDDNF1=$!
            ProgressBarFast & PIDDNF2=$!
            wait $PIDDNF1
            wait $PIDDNF2
      fi
      if [ $apt == True ]; then
            echo -e "[Cleaning APT]"
            sudo apt autoclean >&- 2>&- & PIDAPT1=$!
            ProgressBarFast & PIDAPT2=$!
            sudo apt purge >&- 2>&- & PIDAPT3=$!
            wait $PIDAPT1
            wait $PIDAPT2
            wait $PIDAPT3
      fi
      if [ $zypp == True ]; then
            echo -e "[Cleaning Zypp]"
            sudo zypper clean >&- 2>&- & PIDZYPP1=$!
            ProgressBarFast & PIDZYPP2=$!
            wait $PIDZYPP1
            wait $PIDZYPP2
      fi
      echo -e " "
fi

if [ "$parameter2" == "-exit" ]; then
      echo -e " "
	echo -e "${C5}Closing terminal window in $wait_time secs...${Color_Off}"
      notify-send  "Closing terminal window in $wait_time secs..."
      Timer
      echo " "
      echo -e "${C5}Closing terminal window now...${Color_Off}"
      notify-send "Closing terminal window now..."
	sudo kill -9 $PPID >&- 2>&-
fi

if [ "$parameter2" == "-poweroff" ] || [ "$parameter2" == "-shutdown" ]; then
      echo " "
	echo -e "${C5}Shutingdown your system in $wait_time seconds..."
      notify-send "Shutingdown your system in $wait_time seconds..."
	Timer
      echo " "
      echo -e "${C5}Shutingdown your system now...${Color_Off}"
      notify-send "Shutingdown your system now..."
	sudo poweroff
fi

if [ "$parameter2" == "-reboot" ] || [ "$parameter2" == "-restart" ]; then
      echo ""
	echo -e "${C5}Rebooting your system in $wait_time seconds...${Color_Off}"
      notify-send "Rebooting your system in $wait_time seconds..."
	Timer
      echo " "
      echo -e "${C5}Rebooting your system now...${Color_Off}"
      notify-send "Rebooting your system now"
	sudo reboot
fi

if [ "$parameter2" == "-autoremove" ]; then
      echo ""
      echo -e "${C5}Looking for uneeded or unused dependencises...${Color_Off}"
      echo -e "${C5}Autoremoving packages...${Color_Off}"
      echo " "
      if [ "$flatpak" == True ]; then
            echo -e "[Autoremoving Flatpak Packages]"
            sudo flatpak uninstall -y --unused >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$snap" == True ]; then
            echo -e ${B1}ERROR: Sorry but snapcraft autoremove is not yet supported${normal} $progress_bar_error
      fi
      if [ "$yum" == True ]; then
            echo -e "[Autoremoving Yum Packages]"
            sudo yum autoremove -y >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$cargo" == True ]; then
            echo -e ${B1}ERROR: Sorry but cargo autoremove is not yet supported${normal} $progress_bar_error
      fi
      if [ "$dnf" == True ]; then
            echo -e "[Autoremoving DNF Packages]"
            sudo dnf autoremove -y >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$apt" == True ]; then
            echo -e "[Autoremoving APT Packages]"
            sudo apt autoremove -y >&- 2>&- & PID1=$!
            ProgressBar & PID2=$!
            wait $PID1
            wait $PID2
      fi
      if [ "$zypp" == True ]; then
            echo -e ${B1}ERROR: Sorry but zypper autoremove is not yet supported${normal} $progress_bar_error
      fi
fi

# End jobs

if [ "$disable_done" == False ]; then
      echo " "
      echo -e  "${Color_Off}${B6}Done $progress_bar_done${Color_Off}"
fi